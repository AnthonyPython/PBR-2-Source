import tomllib
from pathlib import Path
from enum import IntEnum
from version import __version__

'''
# Config example:
app-theme = 0 # 0/1/2
reload-on-export = false # true/false
'''

config_path = Path('./appconfig.toml')

class AppTheme(IntEnum):
	Default = 0
	Fusion = 1
	Native = 2

class AppConfig():
	appTheme = AppTheme.Default
	reloadOnExport = False

def load_config() -> AppConfig:
	if not config_path.is_file():
		make_config()
		print('Making new config')
		return AppConfig()
		
	parsed = AppConfig()
	
	with open(config_path, 'rb') as file:
		rawConf = tomllib.load(file)

		rawAppTheme: AppTheme = rawConf.get('app-theme', 0)
		if not isinstance(rawAppTheme, int): rawAppTheme = AppTheme.Default
		parsed.appTheme = rawAppTheme

		rawReloadOpt: bool = rawConf.get('reload-on-export', False)
		if not isinstance(rawReloadOpt, bool): rawReloadOpt = False
		parsed.reloadOnExport = rawReloadOpt
	
	return parsed

def save_config(conf: AppConfig):
	with open(config_path, 'w') as file:
		file.writelines([
			f'app-theme = {conf.appTheme}\n',
			f'reload-on-export = {str(conf.reloadOnExport).lower()}\n'
		])

def make_config():
	with open(config_path, 'w') as file:
		file.writelines([
			f'# Generated by PBR-2-Source v{__version__}\n'
			'app-theme = 0\n',
			'reload-on-export = false\n'
		])
