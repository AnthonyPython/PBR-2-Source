import tomlkit
from pathlib import Path
from enum import IntEnum
from .version import __version__
import logging as log
from traceback import format_exc
import sys

'''
# Config example:
app-theme = 0 # 0/1/2
reload-on-export = false # true/false
overwrite-vmts = true # true/false
hijack = true # true/false
'''

if getattr(sys, 'frozen', False) and hasattr(sys, '_MEIPASS'):
	root_path = Path(getattr(sys, '_MEIPASS')).parent
	config_path = root_path / 'appconfig.toml'
else:
	root_path = Path('./').resolve()
	config_path = root_path / 'appconfig.toml'

class AppTheme(IntEnum):
	Default = 0
	Fusion = 1
	Native = 2

class AppConfig():
	__toml__: tomlkit.TOMLDocument|None = None
	def getToml(self):
		return self.__toml__ or tomlkit.TOMLDocument()
	def setToml(self, toml: tomlkit.TOMLDocument):
		self.__toml__ = toml

	appTheme = AppTheme.Default
	reloadOnExport = True
	overwriteVmts = True
	hijack = False

def load_config(gui=True) -> AppConfig:
	log.info("Attempting to load configuration...")
	
	if not config_path.is_file():
		make_config()
		return AppConfig()
	
	parsed = AppConfig()
	
	try:
		with open(config_path, 'rb') as file:
			rawConf = tomlkit.load(file)
			parsed.setToml(rawConf)

			rawAppTheme: AppTheme = rawConf.get('app-theme', AppTheme.Default)
			if not isinstance(rawAppTheme, int): rawAppTheme = AppConfig.appTheme
			parsed.appTheme = rawAppTheme # type: ignore

			rawReloadOpt: bool = rawConf.get('reload-on-export', False)
			if not isinstance(rawReloadOpt, bool): rawReloadOpt = AppConfig.reloadOnExport
			parsed.reloadOnExport = rawReloadOpt

			parsed.overwriteVmts = bool(rawConf.get('overwrite-vmts', AppConfig.overwriteVmts))

			parsed.hijack = bool(rawConf.get('hijack', AppConfig.hijack))
	
	except Exception as e:
		log.warning(f'Failed to parse the configuration!\n\n{format_exc()}')
		
		if gui:
			from PySide6.QtWidgets import QMessageBox
			message = QMessageBox(QMessageBox.Icon.Warning, 'Configuration Error', f'Invalid app configuration:\n{e}')
			message.addButton(QMessageBox.StandardButton.Cancel)
			message.addButton(QMessageBox.StandardButton.Reset)
			message.setDefaultButton(QMessageBox.StandardButton.Reset)
			result = message.exec()
			if result != QMessageBox.StandardButton.Reset:
				exit(0)

		make_config()
	return parsed

def save_config(conf: AppConfig):
	with open(config_path, 'w') as file:
		toml = conf.getToml()
		toml['app-theme'] = conf.appTheme
		toml['reload-on-export'] = conf.reloadOnExport
		toml['overwrite-vmts'] = conf.overwriteVmts
		toml['hijack'] = conf.hijack
		tomlkit.dump(toml, file)

def make_config():
	log.info('Writing new configuration...')
	with open(config_path, 'w') as file:
		file.writelines([
			f'# Generated by PBR-2-Source v{__version__}\n'
			'app-theme = 0\n',
			'reload-on-export = true\n',
			'overwrite-vmts = true\n',
			'hijack = false\n'
		])
